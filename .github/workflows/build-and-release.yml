name: Build and Release

on:
  push:
    branches: [main]
    tags:
      - 'v*'
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - '.github/workflows/*.yml'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force create release even for non-versioned commits'
        required: false
        default: false
        type: boolean

# Cancel previous runs if new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  pull-requests: write
  actions: write

jobs:
  # Check if version number changed in package.json OR if this is a version tag push
  check-release:
    name: Check Release Needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.check.outputs.new_version }}
      version_changed: ${{ steps.check.outputs.version_changed }}
      is_tag_push: ${{ steps.check.outputs.is_tag_push }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for version changes or tag push
        id: check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          SHOULD_RELEASE=false
          VERSION_CHANGED=false
          IS_TAG_PUSH=false
          
          # Check if this is a tag push (from npm version)
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            IS_TAG_PUSH=true
            TAG_VERSION="${{ github.ref_name }}"
            echo "Tag push detected: $TAG_VERSION"
            
            # Extract version from tag (remove 'v' prefix)
            TAG_VERSION_NUMBER="${TAG_VERSION#v}"
            echo "Tag version number: $TAG_VERSION_NUMBER"
            
            # Check if tag version matches package.json version
            if [ "$TAG_VERSION_NUMBER" = "$CURRENT_VERSION" ]; then
              SHOULD_RELEASE=true
              echo "Tag version matches package.json version - triggering release"
            else
              echo "Warning: Tag version ($TAG_VERSION_NUMBER) doesn't match package.json version ($CURRENT_VERSION)"
              # Still trigger release but use package.json version
              SHOULD_RELEASE=true
            fi
          else
            # This is a regular commit push - check for manual version changes
            echo "Regular commit push - checking for version changes"
            
            # Get previous version from the last commit
            PREVIOUS_VERSION=""
            if git show HEAD~1:package.json >/dev/null 2>&1; then
              PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -e "
                let data = '';
                process.stdin.on('data', chunk => data += chunk);
                process.stdin.on('end', () => {
                  try {
                    const pkg = JSON.parse(data);
                    console.log(pkg.version || '');
                  } catch (e) {
                    console.log('');
                  }
                });
              ")
            fi
            
            echo "Previous version: $PREVIOUS_VERSION"
            
            # Check if version changed manually
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ -n "$PREVIOUS_VERSION" ]; then
              SHOULD_RELEASE=true
              VERSION_CHANGED=true
              echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            fi
          fi
          
          # Force release if manually triggered
          if [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            SHOULD_RELEASE=true
            echo "Force release triggered"
          fi
          
          if [ "$SHOULD_RELEASE" = "false" ]; then
            echo "No release trigger detected"
          fi
          
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=$VERSION_CHANGED" >> $GITHUB_OUTPUT
          echo "is_tag_push=$IS_TAG_PUSH" >> $GITHUB_OUTPUT
          echo "Should release: $SHOULD_RELEASE (version changed: $VERSION_CHANGED, tag push: $IS_TAG_PUSH)"

  # Run tests in parallel (faster than running in each build job)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run type checking
        run: npm run typecheck

      - name: Run Jest tests
        run: npm test

  # Build the application for all platforms
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [check-release, test]
    if: needs.check-release.outputs.should_release == 'true'
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Rebuild Sharp for current platform
        run: npm rebuild sharp --silent

      - name: Build application
        run: npm run prepare:build

      - name: Clean up unnecessary files
        run: |
          find release/ -name "*.yml" -delete || true
          find release/ -name "*.yaml" -delete || true

      # macOS builds
      - name: Build macOS app
        if: matrix.platform == 'mac'
        run: npm run package:mac:universal
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false # Disable code signing for CI
          CSC_LINK: ''
          CSC_KEY_PASSWORD: ''
          APPLE_ID: ''
          APPLE_ID_PASSWORD: ''
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Windows builds
      - name: Build Windows app
        if: matrix.platform == 'win'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run package:win

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            release/
            !release/.icon-ico
            !release/.icon-icns
            !release/*.yml
            !release/*.yaml
          retention-days: 30
          compression-level: 6

  # Create GitHub release with built artifacts
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check-release, build]
    if: needs.check-release.outputs.should_release == 'true'
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.check-release.outputs.new_version }}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # Create changelog content
          if [[ "${{ needs.check-release.outputs.is_tag_push }}" == "true" ]]; then
            TAG_NAME="v$VERSION"
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
            
            # Get commit messages since last tag
            if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
              PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1)
              CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
            else
              CHANGELOG=$(git log --pretty=format:"- %s" HEAD~5..HEAD)
            fi
          else
            TAG_NAME="v$VERSION"
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
            
            # For version bump commits, get recent changes
            CHANGELOG=$(git log --pretty=format:"- %s" HEAD~3..HEAD)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## Film Recipe Wizard v$VERSION
          
          ### Changes
          $CHANGELOG
          
          ### Downloads
          - **macOS**: \`.dmg\` installer (Universal binary - Intel & Apple Silicon)
          - **Windows**: \`.exe\` installer
          
          ### Installation Notes
          - **macOS**: Right-click and select "Open" for unsigned applications
          - **Windows**: Run the installer as administrator if needed
          
          For more information, see the [README](https://github.com/tesenwein/filmRecipeWizard/blob/main/README.md).
          EOF
          
          echo "Release notes generated"

      - name: Check if release exists
        id: check_release
        run: |
          TAG_NAME="${{ steps.changelog.outputs.TAG_NAME }}"
          
          # Check if release already exists
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "Release $TAG_NAME already exists"
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release $TAG_NAME does not exist"
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.check_release.outputs.release_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.changelog.outputs.TAG_NAME }}
          name: "Film Recipe Wizard v${{ needs.check-release.outputs.new_version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: false
          make_latest: true
          discussion_category_name: 'Announcements'
          files: |
            artifacts/build-mac/*.dmg
            artifacts/build-win/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Release (if exists)
        if: steps.check_release.outputs.release_exists == 'true'
        run: |
          TAG_NAME="${{ steps.changelog.outputs.TAG_NAME }}"
          echo "Release $TAG_NAME already exists. Skipping creation to avoid conflicts."
          echo "If you need to update the release, please delete it first or use a different version."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Release
        if: steps.check_release.outputs.release_exists == 'false'
        run: |
          TAG_NAME="${{ steps.changelog.outputs.TAG_NAME }}"
          echo "Ensuring release $TAG_NAME is published (not draft)..."
          
          # Check if release exists and is draft
          RELEASE_INFO=$(gh release view "$TAG_NAME" --json isDraft,isPrerelease 2>/dev/null || echo '{"isDraft":false,"isPrerelease":false}')
          IS_DRAFT=$(echo "$RELEASE_INFO" | jq -r '.isDraft // false')
          IS_PRERELEASE=$(echo "$RELEASE_INFO" | jq -r '.isPrerelease // false')
          
          if [ "$IS_DRAFT" = "true" ]; then
            echo "Release is draft, publishing it..."
            gh release edit "$TAG_NAME" --draft=false --prerelease=false
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}