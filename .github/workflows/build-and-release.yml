name: Build and Release

on:
  push:
    branches: [master, main]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force create release even for non-versioned commits'
        required: false
        default: false
        type: boolean

# Cancel previous runs if new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  # Check if we should create a release based on commit message
  check-release:
    name: Check Release Needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version_bump: ${{ steps.check.outputs.version_bump }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check commit message for release
        id: check
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Check for conventional commit patterns that should trigger releases
          SHOULD_RELEASE=false
          VERSION_BUMP="none"
          IS_PRERELEASE=false

          # Force release if manually triggered
          if [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            SHOULD_RELEASE=true
            VERSION_BUMP="patch"
          # Check for version-bumping commit types
          elif echo "$COMMIT_MSG" | grep -qE "^(feat|fix|perf)(\(.+\))?\!?:"; then
            SHOULD_RELEASE=true
            if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE" || echo "$COMMIT_MSG" | grep -qE "^(feat|fix|perf)(\(.+\))\!:"; then
              VERSION_BUMP="major"
            elif echo "$COMMIT_MSG" | grep -qE "^feat(\(.+\))?\!?:"; then
              VERSION_BUMP="minor"
            elif echo "$COMMIT_MSG" | grep -qE "^(fix|perf)(\(.+\))?\!?:"; then
              VERSION_BUMP="patch"
            fi
          # Check for non-versioning commits that still create builds
          elif echo "$COMMIT_MSG" | grep -qE "^(build|ci|docs|style|refactor|test|chore)(\(.+\))?\!?:"; then
            # Create pre-release builds for non-versioning commits
            SHOULD_RELEASE=true
            IS_PRERELEASE=true
            VERSION_BUMP="prerelease"
          fi

          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Should release: $SHOULD_RELEASE (bump: $VERSION_BUMP, prerelease: $IS_PRERELEASE)"

  # Bump version in package.json before building
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true' && needs.check-release.outputs.is_prerelease != 'true' && needs.check-release.outputs.version_bump != 'none'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Bump version
        id: bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          VERSION_BUMP="${{ needs.check-release.outputs.version_bump }}"

          # Use npm version to bump
          if [ "$VERSION_BUMP" = "major" ]; then
            NEW_VERSION=$(npm version major --no-git-tag-version)
          elif [ "$VERSION_BUMP" = "minor" ]; then
            NEW_VERSION=$(npm version minor --no-git-tag-version)
          elif [ "$VERSION_BUMP" = "patch" ]; then
            NEW_VERSION=$(npm version patch --no-git-tag-version)
          fi

          # Remove the 'v' prefix that npm adds
          NEW_VERSION=${NEW_VERSION#v}
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Commit and push the version bump
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push

  # Build the application for all platforms
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [check-release, bump-version]
    if: always() && needs.check-release.outputs.should_release == 'true'

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck

      - name: Build application
        run: npm run build

      - name: Generate icons (non-Windows)
        if: matrix.platform != 'win'
        run: npm run generate-icons

      - name: Generate icons (Windows)
        if: matrix.platform == 'win'
        run: npm run generate-icons
        shell: cmd

      # macOS builds
      - name: Build macOS app
        if: matrix.platform == 'mac'
        run: npm run package:mac:universal
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false # Disable code signing for CI
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Windows builds
      - name: Build Windows app
        if: matrix.platform == 'win'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx electron-builder --win

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            release/
            !release/.icon-ico
            !release/.icon-icns
          retention-days: 30

  # Create GitHub release with all platform builds
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check-release, bump-version, build]
    if: always() && needs.check-release.outputs.should_release == 'true' && needs.build.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for changelog generation
          ref: ${{ github.ref }} # Make sure we have the latest changes

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: |
          echo "=== Artifact directory structure ==="
          find artifacts -type f | sort
          echo "=== Looking for specific file types ==="
          find artifacts -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" \) | sort

      - name: Determine version
        id: version
        run: |
          # Pull latest changes to get the bumped version
          git pull origin ${{ github.ref_name }}

          # Get the version from package.json (already bumped by bump-version job)
          if [ "${{ needs.bump-version.outputs.new_version }}" != "" ]; then
            NEW_VERSION="${{ needs.bump-version.outputs.new_version }}"
          else
            # For prereleases or when no version bump needed
            CURRENT_VERSION=$(node -p "require('./package.json').version")

            if [ "${{ needs.check-release.outputs.is_prerelease }}" = "true" ]; then
              # Create prerelease version with commit SHA
              SHORT_SHA=$(git rev-parse --short HEAD)
              NEW_VERSION="${CURRENT_VERSION}-dev.${SHORT_SHA}"
            else
              NEW_VERSION="$CURRENT_VERSION"
            fi
          fi

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag/release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="${LAST_TAG}..HEAD"
          fi

          echo "## 📋 Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Group commits by type
          git log $COMMIT_RANGE --pretty=format:"%s" --reverse | while read line; do
            if echo "$line" | grep -qE "^feat(\(.+\))?\!?:"; then
              echo "### ✨ Features" >> CHANGELOG.md
              echo "- $(echo "$line" | sed 's/^feat[^:]*: *//')" >> CHANGELOG.md
            elif echo "$line" | grep -qE "^fix(\(.+\))?\!?:"; then
              echo "### 🐛 Bug Fixes" >> CHANGELOG.md
              echo "- $(echo "$line" | sed 's/^fix[^:]*: *//')" >> CHANGELOG.md
            elif echo "$line" | grep -qE "^perf(\(.+\))?\!?:"; then
              echo "### ⚡ Performance" >> CHANGELOG.md
              echo "- $(echo "$line" | sed 's/^perf[^:]*: *//')" >> CHANGELOG.md
            elif echo "$line" | grep -qE "^(build|ci|docs|style|refactor|test|chore)(\(.+\))?\!?:"; then
              echo "### 🔧 Other Changes" >> CHANGELOG.md
              echo "- $(echo "$line" | sed 's/^[^:]*: *//')" >> CHANGELOG.md
            fi
          done

          # Add download section
          echo "" >> CHANGELOG.md
          echo "## 📦 Downloads" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Choose the appropriate version for your platform:" >> CHANGELOG.md
          echo "- **macOS**: \`.dmg\` (installer) or \`.zip\` (portable)" >> CHANGELOG.md
          echo "- **Windows**: \`.exe\` (installer)" >> CHANGELOG.md
          echo "- **Linux**: \`.AppImage\` (portable)" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Foto Recipe Wizard v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          prerelease: ${{ needs.check-release.outputs.is_prerelease == 'true' }}
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.exe
            artifacts/**/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Version already updated by bump-version job, no need to update again
