name: Build and Release

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force create release even for non-versioned commits'
        required: false
        default: false
        type: boolean

# Cancel previous runs if new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  pull-requests: write
  actions: write

jobs:
  # Check if we should create a release based on commit message
  check-release:
    name: Check Release Needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version_bump: ${{ steps.check.outputs.version_bump }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check commit message for release
        id: check
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Check for conventional commit patterns that should trigger releases
          SHOULD_RELEASE=false
          VERSION_BUMP="none"
          IS_PRERELEASE=false

          # Force release if manually triggered
          if [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            SHOULD_RELEASE=true
            VERSION_BUMP="patch"
          # Check for manual version bump commits (should create proper releases)
          elif echo "$COMMIT_MSG" | grep -qE "^chore:.*bump version to [0-9]+\.[0-9]+\.[0-9]+"; then
            SHOULD_RELEASE=true
            VERSION_BUMP="none"  # Version already bumped manually
            IS_PRERELEASE=false
          # Check for version-bumping commit types
          elif echo "$COMMIT_MSG" | grep -qE "^(feat|fix|perf)(\(.+\))?\!?:"; then
            SHOULD_RELEASE=true
            if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE" || echo "$COMMIT_MSG" | grep -qE "^(feat|fix|perf)(\(.+\))\!:"; then
              VERSION_BUMP="major"
            elif echo "$COMMIT_MSG" | grep -qE "^feat(\(.+\))?\!?:"; then
              VERSION_BUMP="minor"
            elif echo "$COMMIT_MSG" | grep -qE "^(fix|perf)(\(.+\))?\!?:"; then
              VERSION_BUMP="patch"
            fi
          # Check for non-versioning commits that still create builds
          elif echo "$COMMIT_MSG" | grep -qE "^(build|ci|docs|style|refactor|test|chore)(\(.+\))?\!?:"; then
            # Create pre-release builds for non-versioning commits
            SHOULD_RELEASE=true
            IS_PRERELEASE=true
            VERSION_BUMP="prerelease"
          fi

          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Should release: $SHOULD_RELEASE (bump: $VERSION_BUMP, prerelease: $IS_PRERELEASE)"

  # Prepare version for release (no actual bumping due to protected branch)
  prepare-version:
    name: Prepare Version
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_bumped: ${{ steps.version.outputs.version_bumped }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Determine version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          VERSION_BUMP="${{ needs.check-release.outputs.version_bump }}"
          VERSION_BUMPED=false

          if [ "${{ needs.check-release.outputs.is_prerelease }}" = "true" ]; then
            # Create prerelease version with commit SHA
            SHORT_SHA=$(git rev-parse --short HEAD)
            NEW_VERSION="${CURRENT_VERSION}-dev.${SHORT_SHA}"
          else
            # Version already bumped manually, use current version from package.json
            NEW_VERSION="$CURRENT_VERSION"
            VERSION_BUMPED=false
          fi

          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          echo "Version will be bumped: $VERSION_BUMPED"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_bumped=$VERSION_BUMPED" >> $GITHUB_OUTPUT

  # Build the application for all platforms
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [check-release, prepare-version]
    if: always() && needs.check-release.outputs.should_release == 'true'

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Rebuild Sharp for current platform
        run: npm rebuild sharp

      - name: Rebuild Sharp for current platform
        run: npm rebuild sharp

      - name: Rebuild Sharp for current platform
        run: npm rebuild sharp

      - name: Rebuild Sharp for current platform
        run: npm rebuild sharp

      - name: Rebuild Sharp for current platform
        run: npm rebuild sharp

      - name: Run type checking
        run: npm run typecheck

      - name: Build application
        run: npm run prepare:build

      # Icons are copied from assets/icons to build/icons during build process

      # macOS builds
      - name: Build macOS app
        if: matrix.platform == 'mac'
        run: npm run package:mac:universal
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false # Disable code signing for CI
          CSC_LINK: ''
          CSC_KEY_PASSWORD: ''
          APPLE_ID: ''
          APPLE_ID_PASSWORD: ''
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Windows builds
      - name: Build Windows app
        if: matrix.platform == 'win'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run package:win

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            release/
            !release/.icon-ico
            !release/.icon-icns
          retention-days: 30

  # Create GitHub release with all platform builds
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check-release, prepare-version, build]
    if: always() && needs.check-release.outputs.should_release == 'true' && needs.build.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for changelog generation
          ref: ${{ github.ref }} # Make sure we have the latest changes

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: |
          echo "=== Artifact directory structure ==="
          find artifacts -type f | sort
          echo "=== Looking for specific file types ==="
          find artifacts -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" \) | sort

      - name: Get version for release
        id: version
        run: |
          NEW_VERSION="${{ needs.prepare-version.outputs.new_version }}"
          VERSION_BUMPED="${{ needs.prepare-version.outputs.version_bumped }}"

          echo "Using version: $NEW_VERSION"
          echo "Version was bumped: $VERSION_BUMPED"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          if [ "$VERSION_BUMPED" = "true" ]; then
            echo "⚠️  Note: Version should be manually updated in package.json to $NEW_VERSION after this release"
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag/release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="${LAST_TAG}..HEAD"
          fi

          echo "## 📋 Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Group commits by type
          git log $COMMIT_RANGE --pretty=format:"%s" --reverse | while read line; do
            if echo "$line" | grep -qE "^feat(\(.+\))?\!?:"; then
              echo "### ✨ Features" >> CHANGELOG.md
              echo "- $(echo "$line" | sed 's/^feat[^:]*: *//')" >> CHANGELOG.md
            elif echo "$line" | grep -qE "^fix(\(.+\))?\!?:"; then
              echo "### 🐛 Bug Fixes" >> CHANGELOG.md
              echo "- $(echo "$line" | sed 's/^fix[^:]*: *//')" >> CHANGELOG.md
            elif echo "$line" | grep -qE "^perf(\(.+\))?\!?:"; then
              echo "### ⚡ Performance" >> CHANGELOG.md
              echo "- $(echo "$line" | sed 's/^perf[^:]*: *//')" >> CHANGELOG.md
            elif echo "$line" | grep -qE "^(build|ci|docs|style|refactor|test|chore)(\(.+\))?\!?:"; then
              echo "### 🔧 Other Changes" >> CHANGELOG.md
              echo "- $(echo "$line" | sed 's/^[^:]*: *//')" >> CHANGELOG.md
            fi
          done

          # Add download section
          echo "" >> CHANGELOG.md
          echo "## 📦 Downloads" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Choose the appropriate version for your platform:" >> CHANGELOG.md
          echo "- **macOS**: \`.dmg\` (installer)" >> CHANGELOG.md
          echo "- **Windows**: \`.exe\` (installer)" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Film Recipe Wizard v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          prerelease: ${{ needs.check-release.outputs.is_prerelease == 'true' }}
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Sync main changes back to develop to prevent conflicts
  sync-branches:
    name: Sync Main to Develop
    runs-on: ubuntu-latest
    needs: [check-release, prepare-version, build, release]
    if: always() && needs.check-release.outputs.should_release == 'true' && needs.release.result == 'success' && needs.check-release.outputs.is_prerelease == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Sync master to develop
        run: |
          # Fetch latest changes
          git fetch origin main
          git fetch origin develop

          # Checkout develop and merge main
          git checkout develop
          git pull origin develop

          # Merge main into develop
          if git merge origin/main --no-edit; then
            echo "✅ Successfully merged main into develop"
            git push origin develop
          else
            echo "❌ Merge conflicts detected. Manual resolution required."
            echo "Please resolve conflicts manually and push to develop."
            exit 1
          fi

      # Version already updated by bump-version job, no need to update again
