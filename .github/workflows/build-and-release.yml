name: Build and Release

on:
  push:
    branches: [main]
    tags:
      - 'v*'
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force create release even for non-versioned commits'
        required: false
        default: false
        type: boolean

# Cancel previous runs if new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  pull-requests: write
  actions: write

jobs:
  # Check if version number changed in package.json OR if this is a version tag push
  check-release:
    name: Check Release Needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.check.outputs.new_version }}
      version_changed: ${{ steps.check.outputs.version_changed }}
      is_tag_push: ${{ steps.check.outputs.is_tag_push }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for version changes or tag push
        id: check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          SHOULD_RELEASE=false
          VERSION_CHANGED=false
          IS_TAG_PUSH=false
          
          # Check if this is a tag push (from npm version)
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            IS_TAG_PUSH=true
            TAG_VERSION="${{ github.ref_name }}"
            echo "Tag push detected: $TAG_VERSION"
            
            # Extract version from tag (remove 'v' prefix)
            TAG_VERSION_NUMBER="${TAG_VERSION#v}"
            echo "Tag version number: $TAG_VERSION_NUMBER"
            
            # Check if tag version matches package.json version
            if [ "$TAG_VERSION_NUMBER" = "$CURRENT_VERSION" ]; then
              SHOULD_RELEASE=true
              echo "Tag version matches package.json version - triggering release"
            else
              echo "Warning: Tag version ($TAG_VERSION_NUMBER) doesn't match package.json version ($CURRENT_VERSION)"
              # Still trigger release but use package.json version
              SHOULD_RELEASE=true
            fi
          else
            # This is a regular commit push - check for manual version changes
            echo "Regular commit push - checking for version changes"
            
            # Get previous version from the last commit
            PREVIOUS_VERSION=""
            if git show HEAD~1:package.json >/dev/null 2>&1; then
              PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -e "
                let data = '';
                process.stdin.on('data', chunk => data += chunk);
                process.stdin.on('end', () => {
                  try {
                    const pkg = JSON.parse(data);
                    console.log(pkg.version || '');
                  } catch (e) {
                    console.log('');
                  }
                });
              ")
            fi
            
            echo "Previous version: $PREVIOUS_VERSION"
            
            # Check if version changed manually
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ -n "$PREVIOUS_VERSION" ]; then
              SHOULD_RELEASE=true
              VERSION_CHANGED=true
              echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            fi
          fi
          
          # Force release if manually triggered
          if [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            SHOULD_RELEASE=true
            echo "Force release triggered"
          fi
          
          if [ "$SHOULD_RELEASE" = "false" ]; then
            echo "No release trigger detected"
          fi
          
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=$VERSION_CHANGED" >> $GITHUB_OUTPUT
          echo "is_tag_push=$IS_TAG_PUSH" >> $GITHUB_OUTPUT
          echo "Should release: $SHOULD_RELEASE (version changed: $VERSION_CHANGED, tag push: $IS_TAG_PUSH)"

  # Build the application for all platforms
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Rebuild Sharp for current platform
        run: npm rebuild sharp

      - name: Run type checking
        run: npm run typecheck

      - name: Build application
        run: npm run prepare:build

      # macOS builds
      - name: Build macOS app
        if: matrix.platform == 'mac'
        run: npm run package:mac:universal
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false # Disable code signing for CI
          CSC_LINK: ''
          CSC_KEY_PASSWORD: ''
          APPLE_ID: ''
          APPLE_ID_PASSWORD: ''
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Windows builds
      - name: Build Windows app
        if: matrix.platform == 'win'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run package:win

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            release/
            !release/.icon-ico
            !release/.icon-icns
          retention-days: 30

  # Create GitHub release with all platform builds
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check-release, build]
    if: needs.check-release.outputs.should_release == 'true' && needs.build.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for changelog generation and tag operations
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: |
          echo "=== Artifact directory structure ==="
          find artifacts -type f | sort
          echo "=== Looking for specific file types ==="
          find artifacts -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" \) | sort

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.check-release.outputs.new_version }}"
          
          # Check if release already exists (to avoid duplicates)
          if gh release view "v${VERSION}" >/dev/null 2>&1; then
            echo "Release v${VERSION} already exists - skipping release creation"
            echo "skip_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "skip_release=false" >> $GITHUB_OUTPUT
          
          # Get commits since last tag/release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMIT_RANGE="HEAD~10..HEAD"
          else
            COMMIT_RANGE="${LAST_TAG}..HEAD"
          fi

          echo "## 📋 Changes in v${VERSION}" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          # If this is a tag push, highlight that it was triggered by npm version
          if [ "${{ needs.check-release.outputs.is_tag_push }}" = "true" ]; then
            echo "### 🚀 Version Update (via npm version)" >> CHANGELOG.md
            echo "- Released version ${VERSION} using \`npm version\`" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          elif [ "${{ needs.check-release.outputs.version_changed }}" = "true" ]; then
            echo "### 🚀 Version Update" >> CHANGELOG.md
            echo "- Updated to version ${VERSION}" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # List recent commits
          echo "### 📝 Recent Changes" >> CHANGELOG.md
          git log $COMMIT_RANGE --pretty=format:"- %s" --reverse >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Add download section
          echo "" >> CHANGELOG.md
          echo "## 📦 Downloads" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Choose the appropriate version for your platform:" >> CHANGELOG.md
          echo "- **macOS**: \`.dmg\` (installer)" >> CHANGELOG.md
          echo "- **Windows**: \`.exe\` (installer)" >> CHANGELOG.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.changelog.outputs.skip_release != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-release.outputs.new_version }}
          name: Film Recipe Wizard v${{ needs.check-release.outputs.new_version }}
          body_path: CHANGELOG.md
          prerelease: false
          make_latest: true
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}