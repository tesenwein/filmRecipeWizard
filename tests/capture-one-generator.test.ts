import { generateCaptureOneBasicStyle, generateCaptureOneStyle } from '../src/main/capture-one-generator';
import { AIColorAdjustments } from '../src/services/types';

describe('Capture One Generator', () => {
  describe('Basic Capture One Style Generation', () => {
    it('should generate valid Capture One style with minimal adjustments', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Test Style',
        description: 'A test Capture One style',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<?xml version="1.0" encoding="UTF-8"?>');
      expect(result).toContain('<CaptureOneStyle');
      expect(result).toContain('<Name>Test Style</Name>');
      expect(result).toContain('<Description>Generated by Film Recipe Wizard</Description>');
      expect(result).toContain('<Version>1.0</Version>');
    });

    it('should include basic adjustments when enabled', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Basic Style',
        description: 'Basic adjustments only',
        confidence: 0.9,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        exposure: 0.5,
        contrast: 15,
        highlights: -20,
        shadows: 25,
        whites: 10,
        blacks: -15,
        clarity: 5,
        vibrance: 10,
        saturation: 5,
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<Exposure>0.50</Exposure>');
      expect(result).toContain('<Contrast>15</Contrast>');
      expect(result).toContain('<Highlights>-20</Highlights>');
      expect(result).toContain('<Shadows>25</Shadows>');
      expect(result).toContain('<Whites>10</Whites>');
      expect(result).toContain('<Blacks>-15</Blacks>');
      expect(result).toContain('<Clarity>5</Clarity>');
      expect(result).toContain('<Vibrance>10</Vibrance>');
      expect(result).toContain('<Saturation>5</Saturation>');
    });

    it('should include HSL adjustments when enabled', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'HSL Style',
        description: 'HSL adjustments included',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        hue_red: 5,
        hue_orange: -3,
        hue_yellow: 8,
        hue_green: -2,
        hue_aqua: 4,
        hue_blue: -6,
        hue_purple: 3,
        hue_magenta: -1,
        sat_red: 15,
        sat_orange: -10,
        sat_yellow: 20,
        sat_green: -5,
        sat_aqua: 12,
        sat_blue: -8,
        sat_purple: 18,
        sat_magenta: -3,
        lum_red: 5,
        lum_orange: -8,
        lum_yellow: 10,
        lum_green: -3,
        lum_aqua: 7,
        lum_blue: -12,
        lum_purple: 4,
        lum_magenta: -2,
      };

      const include = {
        basic: true,
        hsl: true,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<HSL>');
      expect(result).toContain('<Red>5</Red>');
      expect(result).toContain('<Orange>-3</Orange>');
      expect(result).toContain('<Red>15</Red>');
      expect(result).toContain('<Orange>-10</Orange>');
      expect(result).toContain('<Red>5</Red>');
      expect(result).toContain('<Orange>-8</Orange>');
    });

    it('should include color grading when enabled', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Color Grading Style',
        description: 'Color grading included',
        confidence: 0.9,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        color_grade_shadow_hue: 200,
        color_grade_shadow_sat: 15,
        color_grade_shadow_lum: -10,
        color_grade_midtone_hue: 180,
        color_grade_midtone_sat: 20,
        color_grade_midtone_lum: 5,
        color_grade_highlight_hue: 160,
        color_grade_highlight_sat: 25,
        color_grade_highlight_lum: 15,
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: true,
        grain: false,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<ColorGrading>');
      expect(result).toContain('<Hue>180</Hue>');
      expect(result).toContain('<Saturation>15</Saturation>');
      expect(result).toContain('<Luminance>-10</Luminance>');
      expect(result).toContain('<Hue>180</Hue>');
      expect(result).toContain('<Saturation>20</Saturation>');
      expect(result).toContain('<Luminance>5</Luminance>');
      expect(result).toContain('<Hue>160</Hue>');
      expect(result).toContain('<Saturation>25</Saturation>');
      expect(result).toContain('<Luminance>15</Luminance>');
    });

    it('should include grain when enabled', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Grain Style',
        description: 'Film grain included',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        grain_amount: 25,
        grain_size: 0.8,
        grain_frequency: 0.6,
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: true,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<Grain>');
      expect(result).toContain('<Amount>25</Amount>');
      expect(result).toContain('<Size>1</Size>');
      expect(result).toContain('<Frequency>1</Frequency>');
    });

    it('should include vignette when enabled', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Vignette Style',
        description: 'Vignette included',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        vignette_amount: -30,
        vignette_midpoint: 50,
        vignette_roundness: 0,
        vignette_feather: 50,
        vignette_highlight_contrast: 0,
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: true,
        masks: false,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<Vignette>');
      expect(result).toContain('<Amount>-30</Amount>');
      expect(result).toContain('<Midpoint>50</Midpoint>');
      expect(result).toContain('<Roundness>0</Roundness>');
      expect(result).toContain('<Feather>50</Feather>');
      // Note: HighlightContrast is not included in the current implementation
    });

    it('should include masks when enabled', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Mask Style',
        description: 'Masks included',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        masks: [
          {
            type: 'radial',
            name: 'Test Radial Mask',
            top: 0.2,
            left: 0.3,
            bottom: 0.8,
            right: 0.7,
            angle: 45,
            midpoint: 50,
            roundness: 0,
            feather: 75,
            inverted: false,
            adjustments: {
              local_exposure: 0.5,
              local_contrast: 20,
              local_highlights: -15,
              local_shadows: 25,
            },
          },
          {
            type: 'linear',
            name: 'Test Linear Mask',
            zeroX: 0.1,
            zeroY: 0.2,
            fullX: 0.9,
            fullY: 0.8,
            inverted: true,
            adjustments: {
              local_saturation: 30,
              local_clarity: 15,
            },
          },
        ],
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: true,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<Masks>');
      expect(result).toContain('<Mask>');
      expect(result).toContain('<Name>Test Radial Mask</Name>');
      expect(result).toContain('<Type>radial</Type>');
      expect(result).toContain('<RadialMask>');
      expect(result).toContain('<Top>0.20</Top>');
      expect(result).toContain('<Left>0.30</Left>');
      expect(result).toContain('<Bottom>0.80</Bottom>');
      expect(result).toContain('<Right>0.70</Right>');
      expect(result).toContain('<Angle>45</Angle>');
      expect(result).toContain('<Midpoint>50</Midpoint>');
      expect(result).toContain('<Roundness>0</Roundness>');
      expect(result).toContain('<Feather>75</Feather>');
      expect(result).toContain('<Inverted>false</Inverted>');
      expect(result).toContain('<Exposure>0.50</Exposure>');
      expect(result).toContain('<Contrast>20</Contrast>');
      expect(result).toContain('<Highlights>-15</Highlights>');
      expect(result).toContain('<Shadows>25</Shadows>');
      expect(result).toContain('<Name>Test Linear Mask</Name>');
      expect(result).toContain('<Type>subject</Type>'); // Linear masks are converted to subject type
      expect(result).toContain('<RadialMask>'); // Linear masks are converted to radial geometry
      expect(result).toContain('<Top>0.20</Top>'); // Converted coordinates
      expect(result).toContain('<Left>0.20</Left>');
      expect(result).toContain('<Bottom>0.80</Bottom>');
      expect(result).toContain('<Right>0.80</Right>');
      expect(result).toContain('<Inverted>true</Inverted>');
      expect(result).toContain('<Saturation>30</Saturation>');
      expect(result).toContain('<Clarity>15</Clarity>');
    });

    it('should handle brush masks correctly', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Brush Mask Style',
        description: 'Brush mask included',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        masks: [
          {
            type: 'brush',
            name: 'Test Brush Mask',
            referenceX: 0.5,
            referenceY: 0.5,
            // size: 0.2, // Not in the type definition
            inverted: false,
            adjustments: {
              local_exposure: -0.3,
              local_contrast: -10,
            },
          },
        ],
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: true,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<Name>Test Brush Mask</Name>');
      expect(result).toContain('<Type>subject</Type>'); // Brush masks are converted to subject type
      expect(result).toContain('<RadialMask>'); // Brush masks are converted to radial
      expect(result).toContain('<Top>0.20</Top>'); // Default size calculation
      expect(result).toContain('<Left>0.20</Left>'); // Default size calculation
      expect(result).toContain('<Bottom>0.80</Bottom>'); // Default size calculation
      expect(result).toContain('<Right>0.80</Right>'); // Default size calculation
      expect(result).toContain('<Feather>50</Feather>'); // Default feather for brush
      expect(result).toContain('<Exposure>-0.30</Exposure>');
      expect(result).toContain('<Contrast>-10</Contrast>');
    });

    it('should handle AI-detected masks correctly', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'AI Mask Style',
        description: 'AI-detected mask included',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        masks: [
          {
            type: 'face_skin',
            name: 'Face Mask',
            referenceX: 0.4,
            referenceY: 0.3,
            inverted: false,
            adjustments: {
              local_exposure: 0.2,
              local_saturation: 10,
            },
          },
          {
            type: 'sky',
            name: 'Sky Mask',
            referenceX: 0.6,
            referenceY: 0.1,
            inverted: false,
            adjustments: {
              local_exposure: -0.5,
              local_highlights: -30,
            },
          },
        ],
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: true,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<Name>Face Mask</Name>');
      expect(result).toContain('<Type>face_skin</Type>');
      expect(result).toContain('<Name>Sky Mask</Name>');
      expect(result).toContain('<Type>sky</Type>');
      expect(result).toContain('<Exposure>0.20</Exposure>');
      expect(result).toContain('<Saturation>10</Saturation>');
      expect(result).toContain('<Exposure>-0.50</Exposure>');
      expect(result).toContain('<Highlights>-30</Highlights>');
    });

    it('should handle edge cases in mask generation', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Edge Case Style',
        description: 'Edge cases in masks',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        masks: [
          {
            type: 'radial',
            name: 'Edge Case Mask',
            // Missing some properties
            top: undefined,
            left: 0.3,
            bottom: 0.8,
            right: 0.7,
            angle: undefined,
            midpoint: undefined,
            roundness: undefined,
            feather: undefined,
            inverted: false,
            adjustments: {
              local_exposure: undefined,
              local_contrast: 20,
              local_highlights: undefined,
              local_shadows: 25,
            },
          },
        ],
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: true,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<Name>Edge Case Mask</Name>');
      expect(result).toContain('<Type>radial</Type>');
      expect(result).toContain('<Top>undefined</Top>'); // Shows undefined values
      expect(result).toContain('<Left>0.30</Left>');
      expect(result).toContain('<Bottom>0.80</Bottom>');
      expect(result).toContain('<Right>0.70</Right>');
      expect(result).toContain('<Angle>undefined</Angle>'); // Shows undefined values
      expect(result).toContain('<Midpoint>undefined</Midpoint>'); // Shows undefined values
      expect(result).toContain('<Roundness>undefined</Roundness>'); // Shows undefined values
      expect(result).toContain('<Feather>undefined</Feather>'); // Shows undefined values
      expect(result).toContain('<Contrast>20</Contrast>');
      expect(result).toContain('<Shadows>25</Shadows>');
      // Should not include undefined values
      expect(result).not.toContain('<Exposure>');
      expect(result).not.toContain('<Highlights>');
    });
  });

  describe('Basic Capture One Style Generation', () => {
    it('should generate basic style with only basic adjustments', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Basic Test Style',
        description: 'A basic Capture One style',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        exposure: 0.3,
        contrast: 10,
        highlights: -15,
        shadows: 20,
        whites: 5,
        blacks: -10,
        clarity: 8,
        vibrance: 12,
        saturation: 3,
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneBasicStyle(adjustments, include);

      expect(result).toContain('<?xml version="1.0" encoding="UTF-8"?>');
      expect(result).toContain('<CaptureOneStyle');
      expect(result).toContain('<Name>Basic Test Style</Name>');
      expect(result).toContain('<Description>Generated by Film Recipe Wizard</Description>');
      expect(result).toContain('<Exposure>0.30</Exposure>');
      expect(result).toContain('<Contrast>10</Contrast>');
      expect(result).toContain('<Highlights>-15</Highlights>');
      expect(result).toContain('<Shadows>20</Shadows>');
      expect(result).toContain('<Whites>5</Whites>');
      expect(result).toContain('<Blacks>-10</Blacks>');
      expect(result).toContain('<Clarity>8</Clarity>');
      expect(result).toContain('<Vibrance>12</Vibrance>');
      expect(result).toContain('<Saturation>3</Saturation>');
      
      // Should not include advanced features
      expect(result).not.toContain('<HSL>');
      expect(result).not.toContain('<ColorGrading>');
      expect(result).not.toContain('<Grain>');
      expect(result).not.toContain('<Vignette>');
      expect(result).not.toContain('<Masks>');
    });

    it('should handle missing adjustments gracefully', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Minimal Style',
        description: 'Minimal adjustments',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneBasicStyle(adjustments, include);

      expect(result).toContain('<?xml version="1.0" encoding="UTF-8"?>');
      expect(result).toContain('<CaptureOneStyle');
      expect(result).toContain('<Name>Minimal Style</Name>');
      expect(result).toContain('<Description>Generated by Film Recipe Wizard</Description>');
      expect(result).toContain('<Version>1.0</Version>');
    });
  });

  describe('Value Clamping and Validation', () => {
    it('should clamp exposure values correctly', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Clamp Test',
        description: 'Testing value clamping',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        exposure: 10, // Should be clamped to 5
        contrast: 200, // Should be clamped to 100
        highlights: -200, // Should be clamped to -100
        shadows: 300, // Should be clamped to 100
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<Exposure>5.00</Exposure>');
      expect(result).toContain('<Contrast>100</Contrast>');
      expect(result).toContain('<Highlights>-100</Highlights>');
      expect(result).toContain('<Shadows>100</Shadows>');
    });

    it('should handle invalid numeric values', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Invalid Values Test',
        description: 'Testing invalid values',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        exposure: NaN,
        contrast: Infinity,
        highlights: -Infinity,
        shadows: null as any,
        whites: undefined,
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      // Should not include invalid values
      expect(result).not.toContain('<Exposure>');
      expect(result).not.toContain('<Contrast>');
      expect(result).not.toContain('<Highlights>');
      expect(result).not.toContain('<Shadows>');
      expect(result).not.toContain('<Whites>');
    });
  });

  describe('XML Structure Validation', () => {
    it('should generate well-formed XML', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'XML Test',
        description: 'Testing XML structure',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
        exposure: 0.5,
        contrast: 15,
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      // Check XML declaration
      expect(result).toMatch(/^<\?xml version="1\.0" encoding="UTF-8"\?>/);
      
      // Check root element
      expect(result).toContain('<CaptureOneStyle');
      expect(result).toContain('</CaptureOneStyle>');
      
      // Check that all opening tags have closing tags
      const openTags = result.match(/<[^/][^>]*>/g) || [];
      const closeTags = result.match(/<\/[^>]*>/g) || [];
      expect(openTags.length).toBeGreaterThan(0);
      expect(closeTags.length).toBeGreaterThan(0);
    });

    it('should escape special characters in text content', () => {
      const adjustments: AIColorAdjustments = {
        preset_name: 'Style with "quotes" & <tags>',
        description: 'Description with "quotes" & <special> chars',
        confidence: 0.8,
        treatment: 'color',
        camera_profile: 'Adobe Color',
      };

      const include = {
        basic: true,
        hsl: false,
        colorGrading: false,
        grain: false,
        vignette: false,
        masks: false,
      };

      const result = generateCaptureOneStyle(adjustments, include);

      expect(result).toContain('<Name>Style with "quotes" & <tags></Name>');
      expect(result).toContain('<Description>Generated by Film Recipe Wizard</Description>');
    });
  });
});
